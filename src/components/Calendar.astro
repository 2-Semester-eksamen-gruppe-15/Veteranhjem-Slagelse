---
// Calendar.astro - Interactive calendar component for Astro.js with Supabase integration

// TypeScript interface defining the structure of event data from Supabase
interface Event {
  id: number;
  created_at: string;
  title: string;
  description: string;
  day: number; // Day of the month (1-31)
  month: number; // Month (1-12)
  year: number; // Full year (e.g., 2025)
  start_time: string; // Start time in HH:MM format
  end_time: string; // End time in HH:MM format
  address: string; // Event location/address
  subtitle: string; // Additional event info/subtitle
  image: string; // URL to event image
}

// Fetch all events from Supabase database
// We fetch all events at build time to avoid multiple API calls during navigation
const response = await fetch("https://gayliuppmzloxkcaafnu.supabase.co/rest/v1/Kalender", {
  headers: {
    // Supabase anonymous API key for read access
    apikey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdheWxpdXBwbXpsb3hrY2FhZm51Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc2NTE2NTksImV4cCI6MjA2MzIyNzY1OX0.O1OLLuFF0Q92x9ps9r4CnBhU-cn6RPmKdvsH8vQc_yA",
  },
});

// Parse the JSON response into an array of Event objects
const allEvents: Event[] = await response.json();

// Norwegian month names for display purposes
// Index 0 = January, Index 11 = December
const monthNames = ["Januar", "Febuar", "Marts", "April", "Maj", "Juni", "Juli", "August", "September", "Oktober", "November", "December"];

// Norwegian day abbreviations for calendar headers
// Starting with Monday as per European convention
const dayNames = ["MAN", "TIR", "ONS", "TOR", "FRE", "LØR", "SØN"];

// Get current date to initialize calendar
const now = new Date();
const currentMonth = now.getMonth() + 1; // JavaScript months are 0-based, so add 1
const currentYear = now.getFullYear();
---

<!-- Main calendar container -->
<div class="calendar-container">
  <!-- Calendar header with title and navigation -->
  <header class="calendar-header">
    <h1 class="calendar-title">Kalender</h1>
    <!-- Month navigation controls -->
    <div class="month-navigation">
      <button id="prev-month" class="nav-button">&#8249;</button>
      <!-- Left arrow -->
      <h2 id="current-month" class="calendar-month"></h2>
      <!-- Dynamic month/year display -->
      <button id="next-month" class="nav-button">&#8250;</button>
      <!-- Right arrow -->
    </div>
  </header>

  <!-- Calendar grid container -->
  <div class="calendar-grid" id="calendar-grid">
    <!-- Day headers (MAN, TIR, ONS, etc.) -->
    {dayNames.map((day) => <div class="day-header">{day}</div>)}

    <!-- Calendar days will be dynamically populated by JavaScript -->
    <!-- This allows for smooth month transitions without page reloads -->
  </div>

  <!-- Modal overlay for event details -->
  <!-- Hidden by default, shown when user clicks on an event -->
  <div id="event-modal" class="modal-overlay hidden">
    <div class="modal-content">
      <!-- Close button (X) in top-right corner -->
      <button class="modal-close" id="close-modal">&times;</button>
      <div class="modal-body">
        <!-- Event image (hidden if no image provided) -->
        <div id="modal-image" class="modal-image"></div>
        <div>
          <!-- Event details populated dynamically -->
          <h3 id="modal-title" class="modal-title"></h3>
          <p id="modal-subtitle" class="modal-subtitle"></p>
          <div id="modal-time" class="modal-time"></div>
          <div id="modal-address" class="modal-address"></div>
          <p id="modal-description" class="modal-description"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Global styles - is:global ensures styles apply across the entire page -->
<style is:global>
  /* Main container styling */
  .calendar-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  /* Header section styling */
  .calendar-header {
    margin-bottom: 30px;
  }

  /* Main calendar title */
  .calendar-title {
    font: var(--header2);
    color: var(--rolig); /* Dark green color */
    margin: 0 0 10px 0;
  }

  /* Navigation controls container */
  .month-navigation {
    display: flex;
    align-items: center;
    justify-content: flex-start; /* Left-aligned navigation */
    gap: 15px;
  }

  /* Previous/Next month buttons */
  .nav-button {
    background: none;
    color: var(--rolig);
    border: 2px solid var(--rolig);
    border-radius: 4px;
    width: 30px;
    height: 30px;
    font-size: 1.2rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  /* Button hover effect */
  .nav-button:hover {
    background: var(--rolig);
    color: white;
  }

  /* Current month/year display */
  .calendar-month {
    font: var(--header3);
    color: var(--gylden); /* Orange color matching the design */
    margin: 0;
  }

  /* Main calendar grid layout */
  .calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr); /* 7 equal columns for days of week */
    gap: 4px; /* Small gap between cells */
  }

  /* Day name headers (MAN, TIR, etc.) */
  .day-header {
    padding: 12px 8px;
    font: var(--body);
    text-align: center;
    color: black;
    letter-spacing: 0.5px; /* Slight letter spacing for readability */
  }

  /* Individual calendar day cells */
  .calendar-day {
    background-color: var(--rolig50); /* Sage green for current month */
    min-height: 100px;
    padding: 6px;
    position: relative; /* For absolute positioning of events if needed */
  }

  /* Days from previous/next month styling */
  .calendar-day.other-month {
    background-color: var(--rolig10);
  }

  /* Day number styling */
  .day-number {
    font: var(--body);
    color: black;
    margin-bottom: 4px;
  }

  .day-number.other-day {
    color: #999; /* Gray for non-current month days */
  }

  /* Individual event styling within calendar days */
  .event {
    background-color: white; /* Semi-transparent white */
    border-radius: 3px;
    padding: 3px 5px;
    margin: 1px 0;
    cursor: pointer; /* Indicates clickable element */
    transition: 0.2s; /* Smooth hover animation */
    border-left: 3px solid var(--gylden); /* Orange accent border */
  }

  /* Event hover effect */
  .event:hover {
    transform: translateY(-2px); /* Slight lift effect */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Drop shadow */
  }

  /* Event title styling */
  .event-title {
    font: var(--body);
    color: black;
    margin-bottom: 1px;
  }

  /* Event subtitle styling */
  .event-subtitle {
    font-family: "Montserrat", sans-serif;
    font-size: 0.7rem;
    color: #666;
    margin-bottom: 1px;
  }

  /* Event time display styling */
  .event-time {
    font-size: 0.7rem;
    color: var(--gylden); /* Orange to match theme */
    font-family: "Montserrat", sans-serif;
  }

  /* Modal overlay - covers entire screen */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent dark background */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* High z-index to appear above everything */
  }

  /* Hide modal when not active */
  .modal-overlay.hidden {
    display: none;
  }

  /* Modal content container */
  .modal-content {
    background: white;
    border-radius: 12px;
    max-width: 90%;
    width: 100%;
    overflow-y: auto; /* Scroll if content is too long */
    position: relative;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3); /* Strong drop shadow */
  }

  /* Modal close button (X) */
  .modal-close {
    position: absolute;
    top: 15px;
    right: 20px;
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    color: black;
    background-color: white;
    border-radius: 0 0 0 50%;
    padding-left: 5px;
    z-index: 1001; /* Above modal content */
  }

  /* Close button hover effect */
  .modal-close:hover {
    color: var(--skov);
  }

  /* Modal content padding */
  .modal-body {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 40px;
    padding: 30px; /* Max width for larger screens */
  }

  /* Event image in modal */
  .modal-image {
    width: 100%;
    height: 500px;
    background-size: cover;
    background-position: center;
    border-radius: 8px;
    margin: 5vw 0 5vw 0;
    background-color: #f0f0f0; /* Placeholder background */
  }

  /* Modal event title */
  .modal-title {
    font: var(--header2);
    color: var(--rolig);
    margin: 0 0 10px 0;
  }

  /* Modal event subtitle */
  .modal-subtitle {
    font: var(--subtitle);
    color: var(--gylden);
    margin: 0 0 15px 0;
  }

  /* Modal time display */
  .modal-time {
    font: var(--body);
    color: #666;
    margin-bottom: 10px;
  }

  /* Modal address display */
  .modal-address {
    font: var(--body);
    color: #666;
    margin-bottom: 20px;
  }

  /* Modal description text */
  .modal-description {
    font: var(--body);
    color: black;
    margin: 0;
  }

  /* Mobile responsive styles */
  @media (max-width: 900px) {
    .calendar-title {
      font: var(--header1Mobil);
    }

    .month-navigation {
      gap: 10px;
    }

    .nav-button {
      width: 25px;
      height: 25px;
      font-size: 1rem;
    }

    .calendar-month {
      font: var(--header3Mobil);
    }

    .calendar-grid {
      grid-template-columns: repeat(7, 1fr);
      gap: 1px; /* Smaller gap on mobile */
    }

    .calendar-day {
      min-height: 80px; /* Smaller height on mobile */
      padding: 4px;
    }

    .event-title {
      font: var(--bodyMobil);
    }

    .event-subtitle {
      font-size: 0.6rem;
    }

    .event-time {
      font-size: 0.6rem;
    }

    .modal-content {
      width: 95%;
      margin: 10px;
    }

    .modal-body {
      padding: 10px;
      flex-direction: column; /* Stack image and text on mobile */
      gap: 10px;
    }

    .modal-image {
      width: 100%;
      height: 300px; /* Smaller image height on mobile */
      margin: 0; /* Remove margin on mobile */
    }

    .modal-title {
      font: var(--header2Mobil);
    }
    .modal-subtitle {
      font: var(--subtitleMobil);
    }
    .modal-time {
      font: var(--bodyMobil);
    }
    .modal-address {
      font: var(--bodyMobil);
    }
    .modal-description {
      font: var(--bodyMobil);
    }

    .modal-close {
      top: 5px;
      right: 10px;
    }
  }
</style>

<!-- JavaScript for calendar functionality -->
<!-- define:vars passes server-side data to client-side JavaScript -->
<script define:vars={{ allEvents, monthNames, currentMonth, currentYear }}>
  // Calendar state variables
  // These track which month/year is currently being displayed
  let displayMonth = currentMonth; // Current month being shown
  let displayYear = currentYear; // Current year being shown

  // Initialize calendar when DOM is fully loaded
  document.addEventListener("DOMContentLoaded", function () {
    renderCalendar(); // Render the initial calendar view
    setupEventHandlers(); // Set up all event listeners
  });

  /**
   * Main function to render the calendar for the current displayMonth/displayYear
   * This function is called whenever the user navigates to a different month
   */
  function renderCalendar() {
    // Update the month title display
    const monthTitle = document.getElementById("current-month");
    monthTitle.textContent = `${monthNames[displayMonth - 1]}, ${displayYear}`;

    // Clear existing calendar days but preserve the day headers (MAN, TIR, etc.)
    const calendarGrid = document.getElementById("calendar-grid");
    const dayHeaders = calendarGrid.querySelectorAll(".day-header");
    calendarGrid.innerHTML = "";

    // Re-add the day headers to the cleared grid
    dayHeaders.forEach((header) => calendarGrid.appendChild(header));

    // Calculate calendar layout for the current month
    const firstDay = new Date(displayYear, displayMonth - 1, 1); // First day of month
    const lastDay = new Date(displayYear, displayMonth, 0); // Last day of month
    const firstDayOfWeek = (firstDay.getDay() + 6) % 7; // Adjust for Monday start (0=Monday)
    const daysInMonth = lastDay.getDate(); // Number of days in current month

    // Get information about the previous month for leading days
    const prevMonth = new Date(displayYear, displayMonth - 2, 0);
    const daysInPrevMonth = prevMonth.getDate();

    // Array to hold all calendar day objects
    const calendarDays = [];

    // Add trailing days from previous month
    // These fill the empty spaces at the beginning of the calendar grid
    for (let i = firstDayOfWeek - 1; i >= 0; i--) {
      const day = daysInPrevMonth - i;
      // Calculate which month/year these days belong to
      const prevMonthNum = displayMonth === 1 ? 12 : displayMonth - 1;
      const prevYear = displayMonth === 1 ? displayYear - 1 : displayYear;

      // Find events for this day
      const dayEvents = allEvents.filter((event) => event.day === day && event.month === prevMonthNum && event.year === prevYear);

      calendarDays.push({
        day,
        isCurrentMonth: false, // Mark as previous month
        events: dayEvents,
        isToday: false,
      });
    }

    // Add all days of the current month
    for (let day = 1; day <= daysInMonth; day++) {
      // Filter events for this specific day
      const dayEvents = allEvents.filter((event) => event.day === day && event.month === displayMonth && event.year === displayYear);

      calendarDays.push({
        day,
        isCurrentMonth: true, // Mark as current month
        events: dayEvents,
        isToday: false,
      });
    }

    // Add leading days from next month to fill the calendar grid
    // Standard calendar grids are 6 rows × 7 days = 42 cells
    const totalCells = Math.ceil(calendarDays.length / 7) * 7;
    for (let day = 1; calendarDays.length < totalCells; day++) {
      // Calculate which month/year these days belong to
      const nextMonthNum = displayMonth === 12 ? 1 : displayMonth + 1;
      const nextYear = displayMonth === 12 ? displayYear + 1 : displayYear;

      // Find events for this day
      const dayEvents = allEvents.filter((event) => event.day === day && event.month === nextMonthNum && event.year === nextYear);

      calendarDays.push({
        day,
        isCurrentMonth: false, // Mark as next month
        events: dayEvents,
        isToday: false,
      });
    }

    // Render each calendar day as a DOM element
    calendarDays.forEach(({ day, isCurrentMonth, events }) => {
      // Create the day container
      const dayElement = document.createElement("div");
      dayElement.className = `calendar-day ${!isCurrentMonth ? "other-month" : ""}`;

      // Create and add the day number
      const dayNumber = document.createElement("div");
      dayNumber.className = `day-number ${isCurrentMonth ? "" : "other-day"}`;
      dayNumber.textContent = day;
      dayElement.appendChild(dayNumber);

      // Create and add each event for this day
      events.forEach((event) => {
        const eventElement = document.createElement("div");
        eventElement.className = "event";

        // Store event data as HTML data attributes for easy access when clicked
        eventElement.dataset.eventId = event.id;
        eventElement.dataset.eventTitle = event.title;
        eventElement.dataset.eventSubtitle = event.subtitle || "";
        eventElement.dataset.eventDescription = event.description || "";
        eventElement.dataset.eventTime = `${event.start_time}${event.end_time ? `-${event.end_time}` : ""}`;
        eventElement.dataset.eventAddress = event.address || "";
        eventElement.dataset.eventImage = event.image || "";

        // Create event title element
        const titleElement = document.createElement("div");
        titleElement.className = "event-title";
        titleElement.textContent = event.title;
        eventElement.appendChild(titleElement);

        // Add subtitle if it exists
        if (event.subtitle) {
          const subtitleElement = document.createElement("div");
          subtitleElement.className = "event-subtitle";
          subtitleElement.textContent = event.subtitle;
          eventElement.appendChild(subtitleElement);
        }

        // Add time if it exists
        if (event.start_time) {
          const timeElement = document.createElement("div");
          timeElement.className = "event-time";
          timeElement.textContent = `Kl. ${event.start_time}${event.end_time ? `-${event.end_time}` : ""}`;
          eventElement.appendChild(timeElement);
        }

        // Add the event to the day
        dayElement.appendChild(eventElement);
      });

      // Add the completed day to the calendar grid
      calendarGrid.appendChild(dayElement);
    });

    // Set up click handlers for the newly created events
    setupEventClickHandlers();
  }

  /**
   * Set up all event listeners for calendar functionality
   * This includes navigation buttons, keyboard shortcuts, and modal controls
   */
  function setupEventHandlers() {
    // Previous month button
    document.getElementById("prev-month").addEventListener("click", function () {
      // Handle year transition when going from January to December
      if (displayMonth === 1) {
        displayMonth = 12;
        displayYear -= 1;
      } else {
        displayMonth -= 1;
      }
      renderCalendar(); // Re-render with new month
    });

    // Next month button
    document.getElementById("next-month").addEventListener("click", function () {
      // Handle year transition when going from December to January
      if (displayMonth === 12) {
        displayMonth = 1;
        displayYear += 1;
      } else {
        displayMonth += 1;
      }
      renderCalendar(); // Re-render with new month
    });

    // Keyboard navigation support
    document.addEventListener("keydown", function (e) {
      const modal = document.getElementById("event-modal");

      // If modal is open, only handle Escape key
      if (!modal.classList.contains("hidden")) {
        if (e.key === "Escape") {
          closeModal();
        }
        return; // Don't handle other keys when modal is open
      }

      // Handle arrow keys for month navigation
      if (e.key === "ArrowLeft") {
        document.getElementById("prev-month").click();
      } else if (e.key === "ArrowRight") {
        document.getElementById("next-month").click();
      }
    });

    // Modal close handlers
    const modal = document.getElementById("event-modal");
    const closeButton = document.getElementById("close-modal");

    // Close button click handler
    closeButton.addEventListener("click", closeModal);

    // Click outside modal to close
    modal.addEventListener("click", function (e) {
      if (e.target === modal) {
        // Only if clicking the overlay, not the content
        closeModal();
      }
    });
  }

  /**
   * Set up click handlers for event elements
   * This function is called after each calendar re-render to attach
   * event listeners to the newly created event elements
   */
  function setupEventClickHandlers() {
    const events = document.querySelectorAll(".event");

    events.forEach((event) => {
      event.addEventListener("click", function () {
        // Extract event data from HTML data attributes
        const title = this.dataset.eventTitle;
        const subtitle = this.dataset.eventSubtitle;
        const description = this.dataset.eventDescription;
        const time = this.dataset.eventTime;
        const address = this.dataset.eventAddress;
        const image = this.dataset.eventImage;

        // Populate modal with event data
        document.getElementById("modal-title").textContent = title;
        document.getElementById("modal-subtitle").textContent = subtitle || "";
        document.getElementById("modal-description").textContent = description || "";
        document.getElementById("modal-time").textContent = time ? `Kl. ${time}` : "";
        document.getElementById("modal-address").textContent = address || "";

        // Handle event image
        const modalImage = document.getElementById("modal-image");
        if (image) {
          modalImage.style.backgroundImage = `url(${image})`;
          modalImage.style.display = "block";
        } else {
          modalImage.style.display = "none"; // Hide image container if no image
        }

        // Show the modal
        const modal = document.getElementById("event-modal");
        modal.classList.remove("hidden");
        document.body.style.overflow = "hidden"; // Prevent background scrolling
      });
    });
  }

  /**
   * Close the event modal and restore normal page behavior
   */
  function closeModal() {
    const modal = document.getElementById("event-modal");
    modal.classList.add("hidden");
    document.body.style.overflow = "auto"; // Restore scrolling
  }
</script>
